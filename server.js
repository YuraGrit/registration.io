const express = require('express');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb');
const crypto = require('crypto');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv'); 

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
dotenv.config();

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
const app = express();
const port = process.env.AUTH_PORT;

// URI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const uri = process.env.MONGODB_URI;

// –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è JWT - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const JWT_SECRET = process.env.JWT_SECRET;

// –ß–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN;

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas —á–µ—Ä–µ–∑ MongoClient
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON
app.use(bodyParser.json());

// –î–æ–¥–∞—î–º–æ middleware –¥–ª—è CORS
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const db = client.db("Blockvote");
const usersCollection = db.collection("users");

// Cache –¥–ª—è –∫–æ–¥—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (Redis-–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
const authCodeCache = new Map();
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏

// –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É –∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
async function loadCacheFromDB() {
  try {
    console.log("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
    const yesterday = new Date(Date.now() - CACHE_TTL);
    const recentUsers = await usersCollection.find({
      createdAt: { $gte: yesterday },
      authCodeId: { $exists: true }
    }, {
      projection: { authCodeId: 1, authCodeHash: 1, createdAt: 1 }
    }).toArray();
    
    console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${recentUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è`);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ –∫–µ—à (–±–µ–∑ plaintext–æ–≤–æ–≥–æ –∫–æ–¥—É, –≤—ñ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
    for (const user of recentUsers) {
      authCodeCache.set(user.authCodeId, {
        authCodeHash: user.authCodeHash,
        timestamp: user.createdAt.getTime(),
        fromDB: true // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ë–î
      });
    }
    
    console.log(`‚úÖ –ö–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${authCodeCache.size} –∑–∞–ø–∏—Å—ñ–≤`);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É:", error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –≤—ñ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
setInterval(() => {
  const now = Date.now();
  for (const [key, value] of authCodeCache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      authCodeCache.delete(key);
    }
  }
}, 60 * 60 * 1000); // –û—á–∏—â—É—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
async function createIndexes() {
  try {
    console.log("üìù –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...");
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω–¥–µ–∫—Å–∏
    const existingIndexes = await usersCollection.indexes();
    console.log("üìã –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤:", existingIndexes.length);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    try {
      await usersCollection.dropIndex("authCodeHash_1");
      console.log("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å authCodeHash_1");
    } catch (dropError) {
      console.log("‚ÑπÔ∏è –°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)");
    }
    
    // –û—á–∏—â—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ null –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º authCodeHash
    console.log("üßπ –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...");
    const deleteResult = await usersCollection.deleteMany({ 
      $or: [
        { authCodeHash: null }, 
        { authCodeHash: { $exists: false } },
        { authCodeHash: "" }
      ]
    });
    
    if (deleteResult.deletedCount > 0) {
      console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${deleteResult.deletedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º authCodeHash`);
    }
    
    console.log("üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...");
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è authCodeId (–∑–∞–º—ñ—Å—Ç—å —Ö–µ—à—É)
    await usersCollection.createIndex(
      { authCodeId: 1 }, 
      { 
        unique: true,
        name: "authCodeId_unique"
      }
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è authCodeId");
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è username
    await usersCollection.createIndex(
      { username: 1 }, 
      { 
        unique: true,
        name: "username_unique"
      }
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è username");
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è groupId
    await usersCollection.createIndex(
      { groupId: 1 },
      { name: "groupId_index" }
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è groupId");
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è sessionToken
    await usersCollection.createIndex(
      { sessionToken: 1 }, 
      { 
        sparse: true,
        name: "sessionToken_sparse"
      }
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è sessionToken");
    
    console.log("üéâ –í—Å—ñ —ñ–Ω–¥–µ–∫—Å–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤:", error.message);
    throw error;
  }
}

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async function connectToDatabase() {
  try {
    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB");
    await createIndexes();
    await loadCacheFromDB(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  } catch (err) {
    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB", err);
  }
}

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
  
  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
    
    req.user = decoded;
    next();
  });
};

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ groupId
const generateGroupId = () => crypto.randomBytes(4).toString('hex');

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∫–æ—Ä–æ—Ç—à–∏–π –∞–ª–µ –≤—Å–µ —â–µ –±–µ–∑–ø–µ—á–Ω–∏–π)
const generateAuthCode = () => {
  // –ó–º–µ–Ω—à—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –¥–æ 16-20 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
  const codeLength = Math.floor(Math.random() * 5) + 16;
  
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  
  let code = '';
  for (let i = 0; i < codeLength; i++) {
    code += chars[Math.floor(Math.random() * chars.length)];
  }
  
  return code;
};

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const generateAuthCodeId = () => crypto.randomBytes(12).toString('hex');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–µ—à—É –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∑–Ω–∏–∂–µ–Ω–∏–π cost factor)
const createAuthCodeHash = async (authCode) => {
  // –ó–º–µ–Ω—à—É—î–º–æ cost factor –∑ 12 –¥–æ 10 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
  return await bcrypt.hash(authCode, 10);
};

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞)
app.post('/register', async (req, res) => {
  const { username, status, groupId } = req.body;

  if (!username) {
    return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!" });
  }

  try {
    const authCode = generateAuthCode();
    const authCodeId = generateAuthCodeId();
    const authCodeHash = await createAuthCodeHash(authCode);

    const userStatus = status === "admin" ? "admin" : "user";
    const userGroupId = groupId || generateGroupId();

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    authCodeCache.set(authCodeId, {
      authCode,
      authCodeHash,
      timestamp: Date.now()
    });

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ authCodeId —è–∫ –∫–ª—é—á–µ–º
    const newUser = {
      username,
      authCodeId, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑–∞–º—ñ—Å—Ç—å —Ö–µ—à—É
      authCodeHash, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–µ—à –¥–ª—è –±–µ–∑–ø–µ–∫–∏
      status: userStatus,
      groupId: userGroupId,
      createdAt: new Date()
    };

    await usersCollection.insertOne(newUser);
    res.status(201).json({ 
      message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!",
      authCode,
      status: userStatus,
      groupId: userGroupId
    });
  } catch (error) {
    if (error.code === 11000) {
      if (error.keyPattern?.username) {
        return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î!" });
      }
      return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑" });
    }
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
  }
});

// –ú–∞—Å–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞)
app.post('/register-bulk', async (req, res) => {
  const { userCount } = req.body;
  
  if (!userCount || isNaN(userCount) || userCount < 1 || userCount > 100) {
    return res.status(400).json({ 
      message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100." 
    });
  }
  
  try {
    const groupId = generateGroupId();
    const users = [];
    const usersToReturn = [];
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminAuthCode = generateAuthCode();
    const adminAuthCodeId = generateAuthCodeId();
    const adminAuthCodeHash = await createAuthCodeHash(adminAuthCode);
    
    // –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à
    authCodeCache.set(adminAuthCodeId, {
      authCode: adminAuthCode,
      authCodeHash: adminAuthCodeHash,
      timestamp: Date.now()
    });
    
    const adminUser = {
      username: `admin_${groupId.substring(0, 4)}`,
      authCodeId: adminAuthCodeId,
      authCodeHash: adminAuthCodeHash,
      status: "admin",
      groupId,
      createdAt: new Date()
    };
    
    users.push(adminUser);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    const userPromises = [];
    for (let i = 0; i < userCount; i++) {
      const promise = (async () => {
        const authCode = generateAuthCode();
        const authCodeId = generateAuthCodeId();
        const authCodeHash = await createAuthCodeHash(authCode);
        
        // –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à
        authCodeCache.set(authCodeId, {
          authCode,
          authCodeHash,
          timestamp: Date.now()
        });
        
        const user = {
          username: `user_${groupId.substring(0, 4)}_${i + 1}`,
          authCodeId,
          authCodeHash,
          status: "user",
          groupId,
          createdAt: new Date()
        };
        
        usersToReturn.push({
          username: user.username,
          authCode: authCode,
          status: user.status,
          groupId: user.groupId
        });
        
        return user;
      })();
      
      userPromises.push(promise);
    }
    
    const regularUsers = await Promise.all(userPromises);
    users.push(...regularUsers);
    
    await usersCollection.insertMany(users);
    
    res.status(201).json({
      message: "–ì—Ä—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
      groupId,
      adminCode: adminAuthCode,
      users: usersToReturn
    });
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" });
  }
});

// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
app.post('/login', async (req, res) => {
  const { authCode } = req.body;

  if (!authCode) {
    return res.status(400).json({ message: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó!" });
  }

  try {
    let foundUser = null;
    let matchedAuthCodeId = null;

    // 1. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø—Ä—è–º–∏–π –∑–±—ñ–≥ –≤ –∫–µ—à—ñ (–¥–ª—è —Å–≤—ñ–∂–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
    for (const [authCodeId, cacheData] of authCodeCache.entries()) {
      if (cacheData.authCode === authCode) {
        matchedAuthCodeId = authCodeId;
        break;
      }
    }

    if (matchedAuthCodeId) {
      // –ó–Ω–∞–π—à–ª–∏ –≤ –∫–µ—à—ñ - —à—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ authCodeId
      foundUser = await usersCollection.findOne({ authCodeId: matchedAuthCodeId });
    }

    // 2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—Ä—è–º–∏–π –∑–±—ñ–≥, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ö–µ—à—ñ –≤ –∫–µ—à—ñ
    if (!foundUser) {
      for (const [authCodeId, cacheData] of authCodeCache.entries()) {
        if (cacheData.fromDB && cacheData.authCodeHash) {
          const isMatch = await bcrypt.compare(authCode, cacheData.authCodeHash);
          if (isMatch) {
            foundUser = await usersCollection.findOne({ authCodeId });
            break;
          }
        }
      }
    }

    // 3. –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å - –ø–æ–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –ë–î (—Ä—ñ–¥–∫—ñ—Å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫)
    if (!foundUser) {
      console.log("‚ö†Ô∏è –ü–æ–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –ë–î (–ø–æ–≤—ñ–ª—å–Ω–∏–π)");
      
      // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –ª—ñ–º—ñ—Ç–æ–º —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º
      const users = await usersCollection.find({
        authCodeHash: { $exists: true, $ne: null }
      }, {
        projection: { authCodeHash: 1, username: 1, status: 1, groupId: 1, authCodeId: 1 },
        sort: { createdAt: -1 }, // –°–ø–æ—á–∞—Ç–∫—É –Ω–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        limit: 1000 // –û–±–º–µ–∂—É—î–º–æ –ø–æ—à—É–∫
      }).toArray();
      
      // –ü–∞–∫–µ—Ç–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ –æ–±–º–µ–∂–µ–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      const batchSize = 5; // –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó —Ä–µ—Å—É—Ä—Å—ñ–≤
      for (let i = 0; i < users.length; i += batchSize) {
        const batch = users.slice(i, i + batchSize);
        const promises = batch.map(async (user) => {
          if (user.authCodeHash) {
            const isMatch = await bcrypt.compare(authCode, user.authCodeHash);
            if (isMatch) {
              // –î–æ–¥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–µ—à
              if (user.authCodeId) {
                authCodeCache.set(user.authCodeId, {
                  authCodeHash: user.authCodeHash,
                  timestamp: Date.now(),
                  fromDB: true
                });
              }
              return user;
            }
          }
          return null;
        });
        
        const results = await Promise.all(promises);
        foundUser = results.find(result => result !== null);
        
        if (foundUser) break;
      }
    }

    if (!foundUser) {
      return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó!" });
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
    const token = jwt.sign({ 
      userId: foundUser._id,
      status: foundUser.status || "user",
      groupId: foundUser.groupId || generateGroupId() 
    }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω —É –ë–î (–Ω–µ —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è)
    usersCollection.updateOne(
      { _id: foundUser._id },
      { $set: { sessionToken: token, lastLogin: new Date() } }
    ).catch(err => console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:", err));

    return res.status(200).json({
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!",
      token,
      status: foundUser.status || "user",
      groupId: foundUser.groupId
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
    return res.status(500).json({ message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
app.get('/check-auth', authenticateToken, (req, res) => {
  res.status(200).json({ 
    message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞', 
    userId: req.user.userId,
    status: req.user.status || "user",
    groupId: req.user.groupId
  });
});

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—à–≤–∏–¥–∫–∏–π)
app.get('/auth-status', authenticateToken, (req, res) => {
  // –®–≤–∏–¥–∫–∏–π endpoint –±–µ–∑ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –ë–î
  res.status(200).json({ 
    authenticated: true,
    userId: req.user.userId,
    status: req.user.status || "user",
    groupId: req.user.groupId
  });
});

// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É (–¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏)
app.get('/cache-stats', (req, res) => {
  const cacheSize = authCodeCache.size;
  const fromDB = Array.from(authCodeCache.values()).filter(v => v.fromDB).length;
  const fresh = cacheSize - fromDB;
  
  res.json({
    totalCached: cacheSize,
    fromDatabase: fromDB,
    freshRegistrations: fresh,
    message: `–ö–µ—à: ${cacheSize} –∑–∞–ø–∏—Å—ñ–≤ (${fresh} –Ω–æ–≤–∏—Ö, ${fromDB} –∑ –ë–î)`
  });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/user', authenticateToken, async (req, res) => {
  try {
    const user = await usersCollection.findOne(
      { _id: new ObjectId(req.user.userId) },
      { projection: { username: 1, status: 1, groupId: 1 } }
    );

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
    }

    res.status(200).json({
      username: user.username,
      status: user.status || "user",
      groupId: user.groupId,
      userId: req.user.userId
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
  }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/user-id', authenticateToken, (req, res) => {
  res.json({ 
    userId: req.user.userId,
    status: req.user.status || "user",
    groupId: req.user.groupId
  });
});

// –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/test', (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
connectToDatabase().then(() => {
  app.listen(port, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  });
});
